import numpy as np


def V_tetra(CoordinateArray:np.ndarray) -> float:...
def m_tetra(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def k_tetra(CoordinateArray:np.ndarray, ThermalConductivity:list) -> np.ndarray:...
def edge_tri(CoordinateArray:np.ndarray, h:float) -> np.ndarray:...
def f3_tri(CoordinateArray:np.ndarray, h:float, Tf:float) -> np.ndarray:...
def f2_tri(CoordinateArray:np.ndarray, q:float) -> np.ndarray:...
def fQ_tetra(CoordinateArray:np.ndarray, c:float, Q:float) -> np.ndarray:...
def V_prism(CoordinateArray:np.ndarray) -> float:...
def V_prism27(CoordinateArray:np.ndarray) -> float:...
def k_prism(CoordinateArray:np.ndarray, ThermalConductivity:list) -> np.ndarray:...
def k_prism27(CoordinateArray:np.ndarray, ThermalConductivity:list) -> np.ndarray:...
def m_prism(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def m_prism27(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def fQ_prism(CoordinateArray:np.ndarray, c:float, Q:float) -> np.ndarray:...
def V_pyramid(CoordinateArray:np.ndarray) -> float:...
def k_pyramid(CoordinateArray:np.ndarray, ThermalConductivity:list) -> np.ndarray:...
def m_pyramid(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def fQ_pyramid(CoordinateArray:np.ndarray, c:float, Q:float) -> np.ndarray:...
def V_hexa(CoordinateArray:np.ndarray) -> float:...
def m_hexa(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def k_hexa(CoordinateArray:np.ndarray, ThermalConductivity:list) -> np.ndarray:...
def fQ_hexa(CoordinateArray:np.ndarray, c:float, Q:float) -> np.ndarray:...
def f3_quad(CoordinateArray:np.ndarray, h:float, Tf:float) -> np.ndarray:...
def edge_quad(CoordinateArray:np.ndarray, h:float) -> np.ndarray:...
def f2_quad(CoordinateArray:np.ndarray, q:float) -> np.ndarray:...
def flow_tetra(CoordinateArray:np.ndarray, p:float, c:float, speed:np.ndarray) -> np.ndarray:...
def flow_hexa(CoordinateArray:np.ndarray, p:float, c:float, speed:np.ndarray) -> np.ndarray:...
def flow_prism(CoordinateArray:np.ndarray, p:float, c:float, speed:np.ndarray) -> np.ndarray:...
def flow_pyramid(CoordinateArray:np.ndarray, p:float, c:float, speed:np.ndarray) -> np.ndarray:...
def m_quad(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def k_quad(CoordinateArray:np.ndarray, conductivity:float) -> np.ndarray:...
def fQ_quad(CoordinateArray:np.ndarray, c:float, Q:float) -> np.ndarray:...
def m_tri(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def k_tri(CoordinateArray:np.ndarray, *conductivity) -> np.ndarray:...
def fQ_tri(CoordinateArray:np.ndarray, c:float, Q:float) -> np.ndarray:...
def f2_line(CoordinateArray:np.ndarray, q:float) -> np.ndarray:...
def f3_line(CoordinateArray:np.ndarray, h:float, Tf:float) -> np.ndarray:...
def edge_line(CoordinateArray:np.ndarray, h:float) -> np.ndarray:...
def m_axisymmetric_tri(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def k_axisymmetric_tri(CoordinateArray:np.ndarray, conductivity:float) -> np.ndarray:...
def m_axisymmetric_quad(CoordinateArray:np.ndarray, p:float, c:float) -> np.ndarray:...
def k_axisymmetric_quad(CoordinateArray:np.ndarray, conductivity:float) -> np.ndarray:...
def f2_axisymmetric_line(CoordinateArray:np.ndarray, Q:float) -> np.ndarray:...
def f3_axisymmetric_line(CoordinateArray:np.ndarray, h:float, Tf:float) -> np.ndarray:...
def edge_axisymmetric_line(CoordinateArray:np.ndarray, h:float) -> np.ndarray:...
def version() -> str:...
